//
// Created by lad on 9/27/19.
//

#include <bits/stdc++.h>

using namespace std;

const int N = 55;
const double EPS = 1e-9;

inline int cmp(double u, double v) {
    if (abs(u - v) < EPS) return 0;
    if (u + EPS < v) return -1;
    return 1;
}

int n;
double T;
int A[N], B[N], X[N], Y[N];

struct Point {
    double x, y, id;
    Point(double x = 0, double y = 0, int id = -1) : x(x), y(y), id(id) {}
    Point operator + (const Point &u) const {
        return Point(x + u.x, y + u.y);
    }
    Point operator - (const Point &u) const {
        return Point(x - u.x, y - u.y);
    }
    Point operator + (double k) const {
        return Point(x * k, y * k);
    }
    double operator * (const Point &u) const {
        return x * u.x + y * u.y;
    }
    double operator % (const Point &u) const {
        return x * u.y - y * u.x;
    }
    bool operator < (const Point &u) const {
        if (cmp(x, u.x) != 0) return cmp(x, u.x) < 0;
        return cmp(y, u.y) < 0;
    }
};

vector<double> getEvents(int i, int j, int k) {
    double alpha = (A[j] - A[i]) * (B[k] - B[i]) - (A[k] - A[i]) * (B[j] - B[i]);
    double beta =  (A[j] - A[i]) * (Y[k] - Y[i]) + (B[k] - B[i]) * (X[j] - X[i])
                -  (A[k] - A[i]) * (Y[j] - Y[i]) - (B[j] - B[i]) * (X[k] - X[i]);
    double gamma = (X[j] - X[i]) * (Y[k] - Y[i]) - (Y[j] - Y[i]) * (X[k] - X[i]);
    double delta = beta * beta - 4.0 * gamma * alpha;
    vector<double> res;
    if (cmp(delta, 0) < 0) return res;
    if (cmp(delta, 0) == 0) res.push_back(-beta/ 2.0 / alpha);
    else {
        double p1 = (-beta + sqrt(delta)) / 2.0 / alpha;
        double p2 = (-beta - sqrt(delta)) / 2.0 / alpha;
        res.push_back(p1);
        res.push_back(p2);
    }
    return res;
}

double ccw(Point u, Point v, Point w) {
    u = v - u;
    v = w - v;
    return u % v;
}

vector<int> getCH(double t) {
    vector<Point> ls;
    for (int i = 0; i < n; i++) {
        ls.push_back(Point(X[i] + A[i] * t, Y[i] + B[i] * t, i));
    }
    sort(ls.begin(), ls.end());
    vector<Point> hull;
    for (auto u : ls) {
        while (hull.size() > 1 && cmp(ccw(hull[hull.size() - 2], hull[hull.size() - 1], u), 0) >= 0) hull.pop_back();
        hull.push_back(u);
    }
    int lastSz = hull.size();
    for (int i = (int)ls.size() - 2; i >= 0; i--) {
        Point u = ls[i];
        while (hull.size() - lastSz > 0 && cmp(ccw(hull[hull.size() - 2], hull[hull.size() - 1], u), 0) >= 0) hull.pop_back();
        hull.push_back(u);
    }
    hull.pop_back();
    vector<int> res;
    for (int i = 0; i < hull.size(); i++) {
        res.push_back(hull[i].id);
    }
    return res;
}

double calc(double t, double p, double q, double r) {
    return (p * t * t + q * t + r) * t;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout << fixed;
    cout.precision(10);
    cin >> n >> T;
    for (int i = 0; i < n; i++) {
        cin >> X[i] >> Y[i] >> A[i] >> B[i];
    }
    vector<int> ls = getCH(0);

    for (int u : ls) cout << X[u] << ' ' << Y[u] << endl;

    vector<double> events;
    events.push_back(0);
    events.push_back(T);
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                vector<double> e = getEvents(i, j, k);
                for (auto u : e) if (cmp(u, 0) > 0 && cmp(u, T) < 0) events.push_back(u);
            }
        }
    }
    sort(events.begin(), events.end());
    double res = 0;
    for (int it = 0; it + 1 < events.size(); it++) {
        double now = 0;
        vector<int> P = getCH(0.5 * (events[it] + events[it + 1]));
        for (int id = 0; id < P.size(); id++) {
            int i = P[id];
            int j = P[(id + 1) % P.size()];
            double p = (A[j] * B[i] - A[i] * B[j]) / 3;
            double q = (X[j] * B[i] + Y[i] * A[j] - X[i] * B[j] - Y[j] * A[i]) / 2;
            double r = (X[j] * Y[i] - X[i] * Y[j]);
            now += calc(events[it + 1], p, q, r);
            now -= calc(events[it], p, q, r);
        }
        res += abs(now) / 2.0;
    }
    cout << res / T << endl;
    return 0;
}